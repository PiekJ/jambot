receivers:
  tcplog/docker:
    listen_address: 0.0.0.0:2255
    operators:
      - type: regex_parser
        regex: '^<([0-9]+)>[0-9]+ (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?) (?P<container_id>\S+) (?P<container_name>\S+) [0-9]+ - -( (?P<body>.*))?'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      - type: move
        from: attributes["body"]
        to: body
      - type: remove
        field: attributes.timestamp
        # please remove names from below if you want to collect logs from them
      - type: filter
        id: telemetry_logs_filter
        expr: 'attributes.container_name matches "^jambot-telemetry-(logspout|collector)"'
  hostmetrics:
    collection_interval: 30s
    initial_delay: 1s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
  otlp:
    protocols:
      grpc:

exporters:
  debug:
    verbosity: normal
  otlp:
    endpoint: 192.168.2.42:4317
    tls:
      insecure: true

processors:
  batch:

  resourcedetection:
    detectors: [env,system]
    timeout: 2s

service:
  extensions: []
  pipelines:
    logs:
      receivers: [otlp,tcplog/docker]
      processors: [batch]
      exporters: [otlp,debug]
    metrics:
      receivers: [otlp]
      processors: []
      exporters: [otlp,debug]
    metrics/host:
      receivers: [hostmetrics]
      processors: [resourcedetection,batch]
      exporters: [otlp,debug]
    traces:
      receivers: [otlp]
      processors: []
      exporters: [otlp,debug]
